// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum NotificationType {
    LIKE
    COMMENT
    FOLLOW
}

 model User {
      id    String     @id @default(cuid())
      name  String?
      url String
      bio   String?
      email String  @unique
      clerkId String @unique
      image String?
      location String?
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt

      posts Post[]
      comments Comment[]
      likes Like[]

      followers Follows[] @relation("following")
      following Follows[] @relation("follower")

      notifications Notification[] @relation("notificationsFor")
      notificationsAdd Notification[] @relation("notificationsAt")
    }

model Post {
  id        String      @id @default(cuid())
  title     String?
  content   String
  image String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createAt DateTime @default(now())
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]
  @@index([authorId,postId])

}
model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([userId,postId])
  @@unique([userId,postId])
}

model Follows{
  followerId String 
  followingId String
  createdAt DateTime @default(now())
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
 
  @@index([followerId,followingId])
  @@id([followerId,followingId])
}

model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  user User @relation("notificationsFor", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationsAt", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId],references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])

  
}
